{
  "language": "Solidity",
  "sources": {
    "contracts/StandardProxy/StandardImpl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ncontract StandardImpl {\n  // uint256 public constant VERSION = 1;\n  uint256 public constant VERSION = 2;\n\n  bool public initialized;\n\n  uint256 public value;\n\n  bytes32 public hashValue;\n  uint256[2] public numbers = [1, 2];\n  uint8 public shortNumberA;\n  uint8 public shortNumberB;\n  uint128 public shortNumberC;\n\n  modifier initializer() {\n    require(!initialized, \"Only initialize once\");\n    _;\n    initialized = true;\n  }\n\n  function initialize(uint256 _initValue) public initializer {\n    value = _initValue;\n  }\n\n  function setValue(uint256 _newValue) public {\n    value = _newValue + 10;\n  }\n\n  function setHashvalue(bytes32 _newValue) public {\n    hashValue = _newValue;\n  }\n\n  function setNumbers(uint256[2] memory _newValue) public {\n    numbers = _newValue;\n  }\n\n  function setShortNumberA(uint8 _newValue) public {\n    shortNumberA = _newValue;\n  }\n\n  function setShortNumberB(uint8 _newValue) public {\n    shortNumberB = _newValue;\n  }\n\n  function setShortNumberC(uint128 _newValue) public {\n    shortNumberC = _newValue;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}